module Service exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: service.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias Hello =
    { name : String -- 1
    }


helloDecoder : JD.Decoder Hello
helloDecoder =
    JD.lazy <| \_ -> decode Hello
        |> required "name" JD.string ""


helloEncoder : Hello -> JE.Value
helloEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "name" JE.string "" v.name)
        ]


type alias Bye =
    { name : String -- 1
    }


byeDecoder : JD.Decoder Bye
byeDecoder =
    JD.lazy <| \_ -> decode Bye
        |> required "name" JD.string ""


byeEncoder : Bye -> JE.Value
byeEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "name" JE.string "" v.name)
        ]


type alias Empty =
    }


emptyDecoder : JD.Decoder Empty
emptyDecoder =
    JD.lazy <| \_ -> decode Empty


emptyEncoder : Empty -> JE.Value
emptyEncoder v =
    JE.object <| List.filterMap identity <|
        ]
