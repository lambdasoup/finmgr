// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Hello
	Bye
	Empty
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Hello struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Hello) Reset()                    { *m = Hello{} }
func (m *Hello) String() string            { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()               {}
func (*Hello) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Hello) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Bye struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Bye) Reset()                    { *m = Bye{} }
func (m *Bye) String() string            { return proto.CompactTextString(m) }
func (*Bye) ProtoMessage()               {}
func (*Bye) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Bye) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// actually not needed bug in elm-protobuf
type Empty struct {
	Dummy string `protobuf:"bytes,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Empty) GetDummy() string {
	if m != nil {
		return m.Dummy
	}
	return ""
}

func init() {
	proto.RegisterType((*Hello)(nil), "pb.Hello")
	proto.RegisterType((*Bye)(nil), "pb.Bye")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	SayHello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Bye, error)
	GetHellos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Service_GetHellosClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) SayHello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Bye, error) {
	out := new(Bye)
	err := grpc.Invoke(ctx, "/pb.Service/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetHellos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Service_GetHellosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[0], c.cc, "/pb.Service/GetHellos", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceGetHellosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_GetHellosClient interface {
	Recv() (*Hello, error)
	grpc.ClientStream
}

type serviceGetHellosClient struct {
	grpc.ClientStream
}

func (x *serviceGetHellosClient) Recv() (*Hello, error) {
	m := new(Hello)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Service service

type ServiceServer interface {
	SayHello(context.Context, *Hello) (*Bye, error)
	GetHellos(*Empty, Service_GetHellosServer) error
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Service/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SayHello(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetHellos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).GetHellos(m, &serviceGetHellosServer{stream})
}

type Service_GetHellosServer interface {
	Send(*Hello) error
	grpc.ServerStream
}

type serviceGetHellosServer struct {
	grpc.ServerStream
}

func (x *serviceGetHellosServer) Send(m *Hello) error {
	return x.ServerStream.SendMsg(m)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Service_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHellos",
			Handler:       _Service_GetHellos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe6,
	0x62, 0xf5, 0x48, 0xcd, 0xc9, 0xc9, 0x17, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x24, 0xb9, 0x98, 0x9d, 0x2a, 0x53, 0xb1, 0x4a,
	0xc9, 0x72, 0xb1, 0xba, 0xe6, 0x16, 0x94, 0x54, 0x0a, 0x89, 0x70, 0xb1, 0xa6, 0x94, 0xe6, 0xe6,
	0x56, 0x42, 0x65, 0x21, 0x1c, 0xa3, 0x20, 0x2e, 0xf6, 0x60, 0x88, 0x5d, 0x42, 0x0a, 0x5c, 0x1c,
	0xc1, 0x89, 0x95, 0x10, 0x4b, 0x38, 0xf5, 0x0a, 0x92, 0xf4, 0xc0, 0x4c, 0x29, 0x76, 0x10, 0xd3,
	0xa9, 0x32, 0x55, 0x89, 0x41, 0x48, 0x95, 0x8b, 0xd3, 0x3d, 0xb5, 0x04, 0x2c, 0x5c, 0x0c, 0x51,
	0x02, 0x36, 0x5a, 0x0a, 0xa1, 0x5a, 0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x6a, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xe2, 0xb1, 0xae, 0xc6, 0x00, 0x00, 0x00,
}
